<?xml version="1.0" encoding="utf-8"?>
<topic id="7e60539b-775d-4eb4-b0e7-f971cfadeeeb" revisionNumber="1">
  <developerConceptualDocument
  xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
  xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
<summary>
<para>Optional summary abstract</para>
</summary>
-->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
titles. Specify a numeric value as the inner text to limit it to
a specific number of sub-topics when creating the outline. Specify
zero (0) to limit it to top-level sections only. -->
      <!-- <autoOutline /> -->


    </introduction>

    <!-- Add one or more top-level section elements. These are collapsible.
If using <autoOutline />, add an address attribute to identify it
and specify a title so that it can be jumped to with a hyperlink. -->

    <section address="ox8">
      <content>

        <para>
          For this system to work successfully its necessary that Job Description is an exact match to the Application Description.
        </para>
        <para>
          GenericWorker would check this whether the data supplied through the Job Description matches the requirements mentioned in the Application Description.
        </para>

        <para>
          For the above reason, Job Description will have to reference the right ApplicationDescription(according to which the JobDesc has been modelled) and right Application executable.
        </para>

        <para>
          Apart from the above mentioned parameters which will be checked, every field's name would have to be the same(on both JobDesc and AppDesc) if they are mentioned in the AppDesc and require JobDesc to pass data to the Application.
        </para>
        <para>
          <legacyBold>Steps to be followed while Modeling your JobDescription according to its ApplicationDescription</legacyBold>
        </para>
        <procedure>
          <title>

          </title>
          <steps class="bullet">
            <step>
              <content>


                <para>
                  Make sure you have the same value assigned to the <legacyBold>VENUSApplicationDescription.ApplicationIdentificationURI</legacyBold> and the <legacyBold>VENUSJobDescription.ApplicationIdentificationURI</legacyBold>
                </para>
                <code title="VENUSApplicationDescription.ApplicationIdentificationURI assignment">
                  VENUSApplicationDescription applicationDescription = new VENUSApplicationDescription();

                  // The application needs a unique name so that the GenericWorker can identify the application.
                  var myApplicationName = "MySimpleApplication";
                  applicationDescription.ApplicationIdentificationURI = myApplicationName;

                </code>

                <code title="VENUSJObDescription.ApplicationIdentificationURI assignment">
                  VENUSJobDescription mySimpleJobDescription = new VENUSJobDescription();
                  mySimpleJobDescription.ApplicationIdentificationURI = myApplicationName;

                </code>

                <alert class="note">
                  <para>Reason for this is as follows: The application files are searched in the applicationDataContainer local to the AzureStorageAccount's ApplicationDataContainer(Object of CloudBlobContainer Class).</para>
                </alert>

              </content>
            </step>

            <step>
              <content>
                <para>
                  Assigning other values of the VENUSJobDescription attributes like
                </para>



                <list class="ordered">
                  <listItem>
                    <para>
                      VENUSJobDescription.CustomerJobID - can have any value, preferred mode for verification latter would be
                    </para>
                    <code title="VENUSJobDescription.CustomerJobID value assignment">
                      VENUSJobDescription.CustomerJobID="Customer Name or ID" + DateTime.Now.ToLocalTime().ToString();
                    </code>
                  </listItem>

                  <listItem>
                    <para>
                      VENUSJobDescription.JobName - can have any value, preferred mode for verification latter would be
                    </para>

                    <code title="VENUSJobDescription.JobName value assignment">
                      VENUSJobDescription.JobName="Job Name";
                    </code>
                  </listItem>

                </list>




              </content>
            </step>

            <step>
              <content>
                <para>
                  To run this program we need the application Desc and the application executable, whose location in the cloud is to be referenced in the VENUSJobDescription. This can be done in the following way
                </para>



                <code title="VENUSJobDescription being assigned location of the earlier defined and uploaded ApplicationDescription and Application executable ">

                  myJobDescription.AppPkgReference = new Reference(new AzureBlobReference(appDataContainer.GetBlobReference(myApplicationName + "_App"), UserDataStoreConnectionString));
                  myJobDescription.AppDescReference = new Reference(new AzureBlobReference(appDataContainer.GetBlobReference(myApplicationName + "_Desc"), UserDataStoreConnectionString));

                </code>

                <alert class="note">
                  <para>The ApplicationDataContainer(Object of CloudBlobContainer Class) used while uploading the ApplicationDescription and Application Executable should be used in the above step, so that GenericWorker can search for these files in the same CloudBlobContainer.</para>
                  <para>
                    And also for the reason that Job Description will have to reference the right Application Description(according to which the JobDesc has been modelled) and right Application executable for successful working.
                  </para>
                </alert>
              </content>
            </step>

            <step>
              <content>
                <para>
                  Now assigning all the necessary parameters some value, according to the applicationDescription.  </para>
                  
                  <para>These paramters that need to be assigned some value are as shown in the ApplicationDescription's CommandLineArgumentType section: <link xlink:href="0bb6bb94-8409-4fe6-b7ca-07039245a234">here</link>
         
               </para>

                <list class="ordered">
                  <listItem>
                    <para>
                      SingleReferenceInputArgument
                    </para>
                  </listItem>

                  <listItem>
                    <para>
                      SingleLiteralArgument
                    </para>
                  </listItem>

                  <listItem>
                    <para>
                      MultipleReferenceOutputArgument
                    </para>
                  </listItem>
                </list>


                <para>
                  To do this, lets create a new CloubBlobContainer to store the input files and create reference to output files like it was done in the <legacyBold>uploading app files and app description files section </legacyBold>
                </para>

                <alert class="note">
                  <para>There is no need specifically to create a new CloudBlobContainer for input and output files, but its advisable for the reason that the application which has been uploaded into the cloud as part of the ApplicationDescription creation task, can be used by multiple Jobs(each Job running using a different JobDescription) and thus creating another CloudBlobContainer makes it more modular.</para>
                </alert>

                <code title="create a new CloubBlobContainer to store input files and references to output files ">
                  blobClient = account.CreateCloudBlobClient();
                  var blobContainer = blobClient.GetContainerReference("testcontainer");
                  blobContainer.CreateIfNotExist();

                </code>

                <para>
                  Now the creation of the input file with the help of the newly created CloubBlobContainer (CloudBlobContainer can be thought to be placeholder or a folder created in the cloud to store our input and output file references).
                </para>

                <code title="create a new input file">
                  var nameInput = "input.txt";
                  var blobInput = blobContainer.GetBlobReference(nameInput);
                  blobInput.UploadFile(nameInput);


                </code>
                <alert class="note">
                  <para>Make sure there is a file named input.txt in the same folder as this project or provide the actual path to the input file.</para>
                </alert>

                <para>
                  Now the creation of the references to output files (this is necessary to tell GenericWorker to place the outfiles at these locations in the cloud whenever GenericWorker generates them) with the help of the newly created CloubBlobContainer (CloudBlobContainer can be thought to be placeholder or a folder created in the cloud to store our input and output files).
                </para>

                <code title="create new references to output files in the cloud">
                  // The application description says, that a variable number of output files is needed for execution.
                  // This leads to an array for defining the files.
                  ReferenceArray refArrOut = new ReferenceArray
                  {
                  Name = "OutputFiles", // This has to be the same name as in the application description
                  References = new ReferenceCollection()
                  };

                  int numberOfOutputFiles=5;
                  // Some dummy input files are created in the container created above and directly put in the ReferenceArrays

                  for (int i = 1; i lessThanOrEqualTo numberOfOutputFiles; i++)
                  {
                  // The application creates output files with the ending ".out".
                  // As the output files don't exist yet, just specifying where the GenericWorker should upload them is enough.
                  var nameOut = string.Format("{0}.out", i);
                  var blobOut = blobContainer.GetBlobReference(nameOut); // the same blobContainer used as in the case of input files upload so that the references are in the same blobContainer.
                  var azBlobRefOut = new AzureBlobReference(blobOut, UserDataStoreConnectionString);
                  refArrOut.References.Add(new Reference(nameOut, azBlobRefOut));
                  }


                </code>

                <para>
                  Now that we have the input files uploaded to the cloud and references created for the output files in the cloud.
                </para>
                <para>
                  we can go ahead and assign values to the list of CommandLineArguments as declared as necessary in the ApplicationDescription.
                </para>


                <code title="Assigning values to the CommandLineArguments as declared as necessary in the ApplicationDescription">
                  AzureArgumentSingleReference inputFile = new AzureArgumentSingleReference();
                  inputFile.Name = "InputFile"; // This has to be the same name as in the application description
                  inputFile.DataAddress = blobIn.Uri.AbsoluteUri;
                  inputFile.ConnectionString = UserDataStoreConnectionString;


                  // Second Reference is the number for specifying the amount of output files.
                  // In this case five output files should be created.
                  LiteralArgument outfilesNumber = new LiteralArgument();
                  outfilesNumber.Name = "NumberOutFiles"; // This has to be the same name as in the application description
                  outfilesNumber.LiteralValue = numberOfOutputFiles.ToString();


                  // Finally all parameters / arguments have to be added to the job description
                  mySimpleJobDescription.JobArgs.Add(inputFile);
                  mySimpleJobDescription.JobArgs.Add(outfilesNumber);
                  mySimpleJobDescription.JobArgs.Add(refArrOut);

                </code>



              </content>
            </step>
          </steps>
        </procedure>
        <para>
          <legacyBold>Next Topic:</legacyBold>
          <link xlink:href="fec92d86-badf-4499-9186-b5f4aca2c4fc"> Job Submission Step</link>
        </para>


      </content>
    </section>




    <relatedTopics>
      <!-- One or more of the following:
- A local link
- An external link
- A code entity reference

<link xlink:href="Other Topic's ID"/>
<link xlink:href="Other Topic's ID">Link inner text</link>

<externalLink>
<linkText>Link text</linkText>
<linkAlternateText>Optional alternate link text</linkAlternateText>
<linkUri>URI</linkUri>
</externalLink>

<codeEntityReference>API member ID</codeEntityReference>

Examples:

<link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
<link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

<externalLink>
<linkText>SHFB on CodePlex</linkText>
<linkAlternateText>Go to CodePlex</linkAlternateText>
<linkUri>http://shfb.codeplex.com</linkUri>
</externalLink>

<codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
<codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
<codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
<codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
<codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
<codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
<codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
-->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
