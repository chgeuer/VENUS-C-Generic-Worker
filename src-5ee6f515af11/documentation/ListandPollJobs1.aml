<?xml version="1.0" encoding="utf-8"?>
<topic id="351ce921-8b9e-4837-83de-247e2c588430" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>

      </para>
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>List Jobs and poll for the Job statuses</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>In the last section we saw how to implement our own client, But in the previous section we did not talk about how to know whether the job executed successfully or not, this task of knowing the job status and status of all the jobs that you submitted in the past, can be done 2 ways : </para>
        <list class="bullet">
          <listItem>
            <para>
              You could log on to the Job Management Application.

            </para>

            <para>
              Job Management Application URL is formed as follows: http://jobsubmissionURL's Domain followed by/JobManagement/Account/LogOn?ReturnUrl=%2fJobManagement%2f
            </para>

            <para>
              For the UserId and password field, you will have to use the same UserId and password used in the JobSubmission Task while creating the GenericWorkerJobManagementClient object.
            </para>
          </listItem>

          <listItem>
            <para>
              Instead of the above option, you could retrieve this information through client itself.
            </para>

            <para>
              This information can be retrieved in the following way:

            </para>

            <para>
              When you create the GenericWorkerJobManagementClient Object which you will be using to submit the job using the function call GenericWorkerJobManagementClient_ObjectName.SubmitVENUSJob(VENUSJobDescription_Object). This function call returns a Object of class CreateActivityResponse, this object of Class CreateActivityResponse encapsulates information of the InternalJobId which you would require while querying for the status of the Job corresponding to this InternalJobId.
            </para>
            <code title="Utilize Job Submission function call return data">
              var job = jobSubmissionPortal.SubmitVENUSJob(mySimpleJobDescription); // job now would contain the InternalJobId information
            </code>
            <para>
              Now we would have to attach a meaningful title to this piece of data we have got using the above line of code, to do this, we will make use of Dictionary class, so that we can store the InternalJobId and another piece of information which is the JobId used in the VENUSJobDescription_Object creation.
            </para>
            <code title="Using Dictionary class to store the InternalJobId captured from the previous line of code">
              Dictionary AngularBrace_Begin string, string AngularBrace_End jobMatching = new Dictionary AngularBrace_Begin string, string AngularBrace_End();

              jobMatching.Add(job.ActivityIdentifier.ReferenceParameters.Any.Find(r => r.Name == "Id").InnerText, mySimpleJobDescription.CustomerJobID);
            </code>
            <alert class="note">
              <para>
                These above lines of code just give you a structured way of representing what jobs have been submitted by the UserId you are using to submit jobs using this client alone.
              </para>
            </alert>
            <para>
              With the above code incorporated into your client, you would only be able to see the jobs submitted by you without their status, now to get the status of these jobs whose internalJobId you are in possession off, we will have to perform the following tasks
            </para>


            <list class="bullet">
              <listItem>
                <para>
                  Get the Jobs submitted via your UserId: This can be done using the following functions available.
                </para>


                <alert class="note">
                  <para>
                    The UserId mentioned here is the UserId field used while creating the GenericWorkerJobManagementClient Object.
                  </para>
                </alert>

                <list class="ordered">
                  <listItem>
                    <code title="Get jobs corresponding to a particular UserId">
                      var researcherJobs = jobSubmissionPortal.GetJobs("Researcher");   //returns jobs submitted using the userid = Researcher alone

                    </code>
                  </listItem>

                  <listItem>
                    <code title="List all jobs in the system (if your are admin)">

                      //In the current default security policy the Administrator can use GetAllJobs() to get a list of all jobs in the system
                      var allJobs = jobSubmissionPortal.GetAllJobs();


                    </code>

                    <alert>
                      <para>
                        This is a required step because it just might be a case wherein you have allowed others to make use of the <legacyBold>Researcher</legacyBold> UserId. So to find the status of the job you have submitted you are required to get the jobs under <legacyBold>Researcher</legacyBold> UserId (an example id taken for this example) and get just the ones which you have submitted by comparing the InternalJobId that you are already in possession off to the superset of joblist provided by the above job listing function calls.
                      </para>
                    </alert>
                  </listItem>

                </list>

              </listItem>

              <listItem>
                <para>
                  Get the status of your Jobs by matching the jobs you got to the ones in the dictionary using the internalJobId field.
                </para>

                <code title="querying for the status using your UserId with which you submitted the jobs">
                  var status = jobSubmissionPortal.GetActivityStatuses(myJobs);

                  // Assuming that all jobs finished
                  stopPolling = true;
                  foreach (var jobStatus in status.Response)
                  {
                  // Let's get the internalJobId delivered together with the status
                  var internalJobId = jobStatus.ActivityIdentifier.ReferenceParameters.Any.Find(r => r.Name == "Id").InnerText;

                  // If this internalJobId is known, an output can be done.
                  // Otherwise this might be an old job still resisting in the job table.
                  if (jobMatching.ContainsKey(internalJobId))
                  {
                  Console.WriteLine(String.Format("CustomerJobID \"{0}\": {1}", jobMatching[internalJobId], jobStatus.ActivityStatus.State));

                  // If there is a job which is not yet finished, polling has to be continued
                  stopPolling = stopPolling and !(jobStatus.ActivityStatus.State == OGF.BES.ActivityStateEnumeration.Pending || jobStatus.ActivityStatus.State == OGF.BES.ActivityStateEnumeration.Running);
                  }
                  }
                </code>
              </listItem>
            </list>

            <code title="Complete list and polling of jobs code looks like this">
              var jobSubmissionPortal = GenericWorkerJobManagementClient.CreateSecureClient(
              address: submissionEndpoint,
              issuer: STSEndpoint,
              username: "Researcher",
              password: "secret",
              serviceCert: X509Helper.GetX509Certificate2(
              StoreLocation.LocalMachine, StoreName.My,
              "[YOUR_CERTIFICATE_THUMBPRINT_HERE]",
              X509FindType.FindByThumbprint));

              // As the client is now available, the job can be submitted
              var job = jobSubmissionPortal.SubmitVENUSJob(mySimpleJobDescription);

              // Unfortunately OGF/BES only returns some internal jobId, so the matching between this internal Id and
              // job name has to be done by the client
              Dictionary AngularBrace_Begin string, string="" AngularBrace_End
              jobMatching = new Dictionary AngularBrace_Begin string, string="" AngularBrace_End ();

              // Save matching for the job
              jobMatching.Add(job.ActivityIdentifier.ReferenceParameters.Any.Find(r => r.Name == "Id").InnerText, mySimpleJobDescription.CustomerJobID);

              Console.WriteLine("Done");

              #endregion


              #region Poll for job status

              Console.WriteLine();
              Console.WriteLine("Polling job status:");

              // Polling is actively requesting the status of jobs in a loop
              var stopPolling = false;
              while (!stopPolling)
              {
              // First request the status of all jobs from the user "Researcher"
              var myJobs = jobSubmissionPortal.GetJobs("Researcher");
              var status = jobSubmissionPortal.GetActivityStatuses(myJobs);

              // Assuming that all jobs finished
              stopPolling = true;
              foreach (var jobStatus in status.Response)
              {
              // Let's get the internalJobId delivered together with the status
              var internalJobId = jobStatus.ActivityIdentifier.ReferenceParameters.Any.Find(r => r.Name == "Id").InnerText;

              // If this internalJobId is known, an output can be done.
              // Otherwise this might be an old job still resisting in the job table.
              if (jobMatching.ContainsKey(internalJobId))
              {
              Console.WriteLine(String.Format("CustomerJobID \"{0}\": {1}", jobMatching[internalJobId], jobStatus.ActivityStatus.State));

              // If there is a job which is not yet finished, polling has to be continued
              stopPolling = stopPolling and !(jobStatus.ActivityStatus.State == OGF.BES.ActivityStateEnumeration.Pending || jobStatus.ActivityStatus.State == OGF.BES.ActivityStateEnumeration.Running);
              }
              }

              System.Threading.Thread.Sleep(1000);
              }
            </code>

          </listItem>
        </list>


      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>

    <section>
      <title>
        Other available functions to handle jobs
      </title>

      <content>
        <list class="bullet">

          <listItem>
            <para>
              Retrieve Job Status Mapping
            </para>

            <code title="Get Job Status Mapping">
              var myJobs = jobSubmissionPortal.GetJobs("Researcher");
              var myStats = jobSubmissionPortal.GetActivityStatuses(myJobs);
              var myJobStatusMapping = myStats.GetActivityStatusesResponse1.Response.Select(r => new { r.ActivityStatus.state, r.ActivityIdentifier }).ToList();

            </code>
          </listItem>

          <listItem>
            <para>
              Get number of jobs in a particular state
            </para>
            <code title="Get number jobs in a particular state">
              var numSubmittedJobs = jobSubmissionPortal.GetNumberOfJobs("Researcher", new List AngularBrace_Begin JobStatus AngularBrace_End {JobStatus.Submitted});

            </code>
          </listItem>
        </list>

        <para>
          <legacyBold>Next Topic : </legacyBold>
          <link xlink:href="d1ee0639-809e-48f4-9612-bea4af22e275">Submitting and retrieving a group of jobs</link>
        </para>
      </content>
    </section>



    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
