<?xml version="1.0" encoding="utf-8"?>
<topic id="fe48750b-c4aa-4057-83a3-21cc3a7898f1" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->


    </introduction>


    <section>
      <title>
        Making use of Hierarchy to list, handle and terminate jobs using Heirarchy of jobs
      </title>
      <content>

        <para>Now we can use the GetHierarchy Method to get a list of jobs under the root job</para>
        <code title="retrieve the jobs belonging to a hierarchy" >
          EndpointReferenceType root = resp.CreateActivityResponse1.ActivityIdentifier;
          var jobHierarchy = jobManagementPortal.GetHierarchy(root);

        </code>

        <para>If we have have an reference to one of the jobs which is part of the job hierarchy, we can retrieve the root job by using GetRoot method</para>
        <code title="retrieve the jobs belonging to a hierarchy" >
          EndpointReferenceType someJob = jobHierarchy.ElementAt(2);
          root = jobManagementPortal.GetRoot(someJob);

        </code>
        <para>Similar to groups we can cancel a hierarchy, by retrieving all its jobs and then call TerminateActivities, or we use the comfort method CancelHierarchy and just specify the root of the hierarchy that we want to cancel</para>
        <code  title="cancel all jobs belonging to a hierarchy">
          jobManagementPortal.CancelHierarchy(root);

        </code>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->

      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>



    <section>
      <title>
        Job termination using JobIds
      </title>

      <content>
        <list class="bullet">
          <listItem>
            <para>
              Terminate your jobs
            </para>
            <code title="Job termination code example : Terminates all jobs under the username:Researcher">
              var myJobs = jobSubmissionPortal.GetJobs("Researcher");
              jobSubmissionPortal.TerminateActivities(myJobs);

            </code>

            <code title="Job termination code example : Terminates all jobs which are in Pending state">
              var myJobs = jobSubmissionPortal.GetJobs("Researcher");
              var myStats = jobSubmissionPortal.GetActivityStatuses(myJobs);
              var myPendingJobs = myStats.GetActivityStatusesResponse1.Response.Where(r => r.ActivityStatus.state == ActivityStateEnumeration.Pending).Select(e => e.ActivityIdentifier).ToList();
              jobSubmissionPortal.TerminateActivities(myPendingJobs);

            </code>

          </listItem>
          
        </list>

       
      </content>
    </section>



    <section>
      <title>
        Job termination using Group JobIds
      </title>
      <content>
        <list class="bullet">
        <listItem>
          <para>
            Cancel all jobs belonging to a group

          </para>
          <para>
            You can cancel a job group, by retrieving it as shown above and then calling TerminateActitvies, or you just specify jobgroup and owner and use the following comfort method to cancel the jobs:


          </para>
          <code title="cancel job using group name">
            jobSubmissionPortal.CancelGroup(user, groupName);

          </code>
        </listItem>
        </list>
      </content>
    </section>


   
    <section>
      <title>Remove terminated jobs</title>
      <content>

        <para>Sample code to remove terminated (finished, failed or cancelled) jobs</para>
        <para>
          First of all you have to create a jobmanagement client. You can do this as it is shown here.
        </para>
        <code source="../core/Microsoft.EMIC.Cloud.DocumentationDemo/DemoSourceProgram.cs" lang="C#"
          region="JobSubmissionSecurity" title="JobSubmission secure client" />
        <para>
          Once you have a jobmanagement client you can get a list of your jobs
        </para>
        <code source="../core/Microsoft.EMIC.Cloud.DocumentationDemo/DemoSourceProgram.cs" lang="C#"
        region="RemoveTerminatedJobs" title="Delete your terminated jobs" />
        <alert class="note">
          <para>
            If security is enabled a user gets a security exception if RemoveTerminatedJobs is called on another users jobs.
            The Administrator can remove terminated jobs of all users.
          </para>
          <para>
            If you have have jobs with other statuses that you want to remove from the system, you have to cancel those jobs first, and then call RemoveTerminatedJobs.
          </para>
        </alert>
      </content>
    </section>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
