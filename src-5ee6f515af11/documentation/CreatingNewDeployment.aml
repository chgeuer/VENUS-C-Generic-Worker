<?xml version="1.0" encoding="utf-8"?>
<topic id="d9c5409b-4498-4f33-9d5a-1a710a2abfda" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>As the configuration is now completed, the deployment of the GenericWorker can be created.</para>
    </introduction>
    <!-- <prerequisites><content>Optional prerequisites info</content></prerequisites> -->
    <!-- One or more procedure or section with procedure -->
    <procedure>
      <title>Creating Deployment</title>
      <steps class="ordered">

        <step>
          <content>
            <para>
              Now that the Hosted service URL is reserved, we can go ahead and Create a new Deployment which will be accessible through the URL like in this tutorial "rdemofordeployment.cloudapp.net" as seen in the previous step. In this step you will be able to create a new deployment as explained below.

            </para>
            <para>
              Now Click on the Cloud service/Hosted Service you created in the previous step, this should take you to your cloud service portal page which would look like this without any deployment.
            </para>
            <mediaLink>
              <image xlink:href="newDeploymentImage11"/>
            </mediaLink>
          </content>
        </step>

        <step>
          <content>
            <para>
              Now Click the "Upload" link located in the bottom panel of links of this page to see the pop up which provides you the means to upload your deployment attached to this cloud service URL as shown in the below figure.
            </para>
            <mediaLink>
              <image xlink:href="newDeploymentImage10"/>
            </mediaLink>
          </content>
        </step>
        
        <step>
          <content>
            <para>Enter a name for your deployment. This name can be any name, it is not used afterwards.</para>
          </content>
        </step>
        <step>
          <content>
            <para>Select the previously downloaded file “Cloud.cspkg”.</para>
          </content>
        </step>
        <step>
          <content>
            <para>Select the adopted ServiceConfiguration.</para>
          </content>
        </step>
        <step>
          <content>
            <para>Click “Tick Mark” found on the lower right corner of the popup window to start the creation of the deployment.</para>
          </content>
        </step>
      </steps>
      <conclusion>
        <content>
          <mediaLink>
            <image xlink:href="newDeploymentImage12"/>
          </mediaLink>
          <para>It may take some minutes to finish the process of creation, but finally the status of the new deployment should be “ready”. If this is not the case there is most probably a mistake in ServiceConfiguration. A double check of all steps mentioned in this tutorial is then required.</para>
          <mediaLink>
            <image xlink:href="newDeploymentImage14"/>
          </mediaLink>
          
          <para>
              The difference between a 'production' and a 'staging' deployment in Azure is simply the
              external address of the endpoints (see also the  <externalLink> 
                <linkText>Application Life Cycle Management for Windows Azure Applications</linkText>
                <linkUri>http://msdn.microsoft.com/en-us/library/ff803362.aspx#sec6</linkUri>
              </externalLink>). 
              The production deployment is reachable through the DNS entries we’ve configured previously.
            </para>
        </content>
      </conclusion>
      <!-- <conclusion>Optional conclusion</conclusion> -->
    </procedure>

    <!-- Optional next steps info
    <nextSteps>
      <content><para>Next steps info goes here</para></content>
    </nextSteps>
    -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>